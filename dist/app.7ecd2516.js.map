{"version":3,"sources":["app.js"],"names":["listItems","document","querySelectorAll","showItem","entries","forEach","entry","isIntersecting","target","letter","idx","setTimeout","classList","add","children","options","rootMargin","threshold","observer","IntersectionObserver","item","newString","itemText","innerHTML","split","map","console","log","observe"],"mappings":";AA4BA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,WAAA,MAAA,EAAA,cAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA1BA,IAAIA,EAAgBC,EAAAA,SAASC,iBAAiB,OAU9C,SAASC,EAASC,GAEdA,EAAQC,QAAQ,SAAAC,GACTA,EAAMC,iBACaD,EAAAA,EAAME,OAAON,iBAAiB,SACxCG,QAAQ,SAACI,EAAQC,GAErBC,WAAW,WACPF,EAAOG,UAAUC,IAAI,WAChB,GAANH,KAEPJ,EAAME,OAAOM,SAAS,GAAGF,UAAUC,IAAI,aAlB/CE,QAAU,CACNC,WAAY,OACZC,UAAW,GAGfC,SAAW,IAAIC,qBAAqBhB,EAAUY,SAkBlDf,EAAUK,QAAQ,SAAAe,GACVC,IAAAA,EAAY,GACZC,SAAWF,EAAKN,SAAS,GAAGS,UAAUC,MAAM,IAChDF,SAASG,IAAI,SAAAhB,GAAWY,OAAAA,GAAuB,KAAVZ,EAAuDA,4BAAAA,SAAAA,OAAAA,EAAzE,aACnBiB,QAAQC,IAAIL,UACZF,EAAKG,UAAYF,EACjBH,SAASU,QAAQR","file":"app.7ecd2516.js","sourceRoot":"..\\src","sourcesContent":["// Doc : https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\r\n\r\nlet listItems = [...document.querySelectorAll(\"li\")];\r\n// console.log(listItems);\r\n\r\n    options = {\r\n        rootMargin: '-10%',\r\n        threshold: 0.0\r\n    };\r\n\r\n    observer = new IntersectionObserver(showItem, options);\r\n\r\nfunction showItem(entries){\r\n    // console.log(entries)\r\n    entries.forEach(entry => {\r\n        if(entry.isIntersecting){\r\n            let letters = [...entry.target.querySelectorAll(\"span\")];\r\n            letters.forEach((letter, idx) => {\r\n                // console.log(idx);\r\n                setTimeout(() => {\r\n                    letter.classList.add(\"active\")\r\n                }, idx * 10);\r\n            })\r\n            entry.target.children[0].classList.add(\"active\")\r\n        }\r\n    })\r\n};\r\n\r\nlistItems.forEach(item => {\r\n    let newString = \"\";\r\n        itemText = item.children[0].innerHTML.split(\"\");\r\n    itemText.map(letter => (newString += letter == \" \" ? `<span class=\"gap\"></span>` : `<span>${letter}</span>`));\r\n    console.log(itemText);\r\n    item.innerHTML = newString;\r\n    observer.observe(item)\r\n})"]}